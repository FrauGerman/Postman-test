{
	"info": {
		"_postman_id": "7974ffb1-f993-449a-a7eb-53b686e84c30",
		"name": "test",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "https://swapi.co/api/",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "ded2df69-b175-4a49-8025-9fc732bdc5c9",
						"exec": [
							"//1. корректный формат",
							"pm.test(\"Correct response format  JSON\", function () {",
							"    pm.response.to.have.jsonBody();",
							"  });",
							"//2. Получаем все заявленные поля в ответе",
							"pm.test(\"Check what we have all declared fieldsN\", function () {",
							"    const jsonData = pm.response.json();",
							"    pm.expect(jsonData).to.have.property(\"people\");",
							"    pm.expect(jsonData).to.have.property(\"planets\");",
							"    pm.expect(jsonData).to.have.property(\"films\");",
							"    pm.expect(jsonData).to.have.property(\"species\");",
							"    pm.expect(jsonData).to.have.property(\"vehicles\");",
							"    pm.expect(jsonData).to.have.property(\"starships\");",
							"});    ",
							" // 3. значение поля не ноль",
							"pm.test(\"Check if value isn't NULL\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData.people).not.equal(null);",
							"    pm.expect(jsonData.planets).not.equal(null);",
							"    pm.expect(jsonData.films).not.equal(null);",
							"    pm.expect(jsonData.species).not.equal(null);",
							"    pm.expect(jsonData.vehicles).not.equal(null);",
							"    pm.expect(jsonData.starships).not.equal(null);",
							"});",
							"",
							"// 4. Проверка  не пустого значения",
							"pm.test(\"Check if value isn't empty\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData.people).not.equal(\"\");",
							"    pm.expect(jsonData.planets).not.equal(\"\");",
							"    pm.expect(jsonData.films).not.equal(\"\");",
							"    pm.expect(jsonData.species).not.equal(\"\");",
							"    pm.expect(jsonData.vehicles).not.equal(\"\");",
							"    pm.expect(jsonData.starships).not.equal(\"\");",
							"});",
							"",
							"// 5. Поле содержит специфическую инфу",
							"pm.test(\"Check if field correspond to a specific valuety\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData.people).to.equal(\"https://swapi.co/api/people/\");",
							"    pm.expect(jsonData.planets).to.equal(\"https://swapi.co/api/planets/\");",
							"    pm.expect(jsonData.films).to.equal(\"https://swapi.co/api/films/\");",
							"    pm.expect(jsonData.species).to.equal(\"https://swapi.co/api/species/\");",
							"    pm.expect(jsonData.vehicles).to.equal(\"https://swapi.co/api/vehicles/\");",
							"    pm.expect(jsonData.starships).to.equal(\"https://swapi.co/api/starships/\");",
							"});   ",
							"",
							"// 6. Статус код 200",
							"",
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"// 7. Статус сообщение OK",
							"pm.test(\"Status messagee is OK\", function () {",
							"    pm.response.to.have.status(\"OK\");",
							"});",
							"",
							"// 8. Время ответа меньше 1 сек",
							"pm.test(\"Response time is less than 1000ms\", function () {",
							"    pm.expect(pm.response.responseTime).to.be.below(1000);",
							"}); ",
							"",
							"// 9. Приходит конкретный заголовок",
							"pm.test(\"There is a cpecific header in the response\", function () {",
							"    pm.response.to.have.header(\"Content-Type\");",
							"}); ",
							"",
							"// 10. В хедере определенное значение",
							"pm.test(\"The response has a specific header with a specific value\", function () {",
							"    pm.response.to.be.header(\"Content-Type\", \"application/json\");",
							"});",
							"",
							"// 11. Есть Куки",
							"pm.test(\"Cookie exists\", function () {",
							"    pm.cookies.has(\"__cfduid\");",
							"}); ",
							"",
							"// 12. Значение Кукис",
							"pm.test(\"Cookie has value\", function () {",
							"    try {",
							"        var MY_COOKIE = pm.cookies.get(\"__cfduid\");",
							"        console.log(MY_COOKIE);",
							"    } catch(e) {",
							"        console.log(\"SOME PROBLEM WITH COOKIE -> +e\")",
							"        }",
							"        ",
							"}); ",
							"",
							"",
							"",
							"",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "https://swapi.co/api/",
					"protocol": "https",
					"host": [
						"swapi",
						"co"
					],
					"path": [
						"api",
						""
					]
				}
			},
			"response": []
		},
		{
			"name": "https://swapi.co/api/",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "e6410ee0-1035-450a-bcb1-6e30ea3ffe69",
						"exec": [
							"var data = JSON.parse(responseBody);",
							"var schema = {",
							"    // определяем тип объекта",
							"    \"type\":\"object\",",
							"    // определяем необходимые свойства",
							"    \"required\": [\"people\",\"planets\", \"films\",\"species\", \"vehicles\", \"starships\"],",
							"    //describe the properties",
							"    \"properties\": {",
							"       \"people\": {\"type\":\"string\"},",
							"        \"planets\": {\"type\":\"string\"},",
							"        \"films\": {\"type\":\"string\"},",
							"        \"species\": {\"type\":\"string\"},",
							"        \"vehicles\": {\"type\":\"string\"},",
							"        \"starships\": {\"type\":\"string\"},",
							"    }",
							"};",
							"pm.test('Body is correct', function() {",
							"    pm.expect(tv4.validate(data, schema)).to.be.true;",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "https://swapi.co/api/",
					"protocol": "https",
					"host": [
						"swapi",
						"co"
					],
					"path": [
						"api",
						""
					]
				}
			},
			"response": []
		},
		{
			"name": "https://swapi.co/api/people/1",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "fa1eccaf-f0a9-4520-84dd-2442eec1dcad",
						"exec": [
							"var data = JSON.parse(responseBody);",
							"",
							"var schema = {",
							"    \"type\":\"object\",",
							"    \"required\": [\"name\",\"homeworld\",\"films\", \"species\",\"vehicles\", \"starships\"],",
							"        \"properties\": {",
							"        \"name\": {\"type\":\"string\"},",
							"        \"homeworld\": {\"type\":\"string\"},",
							"        \"films\": {",
							"            \"type\":\"array\",",
							"            \"items\": {\"type\":\"string\"}",
							"        },",
							"        \"species\": {",
							"            \"type\":\"array\",",
							"            \"items\": {\"type\":\"string\"},",
							"        },",
							"        \"vehicles\": {",
							"            \"type\":\"array\",",
							"            \"items\": {\"type\":\"string\"},",
							"        },",
							"        \"starships\": {",
							"            \"type\":\"array\",",
							"            \"items\": {\"type\":\"string\"},",
							"        },",
							"    }",
							"};",
							"",
							"pm.test('Body is correct', function() {",
							"    pm.expect(tv4.validate(data, schema)).to.be.true;",
							"});",
							"    ",
							"    "
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "https://swapi.co/api/people/1",
					"protocol": "https",
					"host": [
						"swapi",
						"co"
					],
					"path": [
						"api",
						"people",
						"1"
					]
				}
			},
			"response": []
		},
		{
			"name": "https://postman-echo.com/basic-auth",
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Authorization",
						"value": "Basic cG9zdG1hbjpwYXNzd29yZA==",
						"type": "text"
					}
				],
				"url": {
					"raw": "https://postman-echo.com/basic-auth",
					"protocol": "https",
					"host": [
						"postman-echo",
						"com"
					],
					"path": [
						"basic-auth"
					]
				}
			},
			"response": []
		},
		{
			"name": "https://0e388f77-5747-4615-a163-6c47c0ac1082.mock.pstmn.io",
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\"name\":\"Sergey\"}"
				},
				"url": {
					"raw": "https://0e388f77-5747-4615-a163-6c47c0ac1082.mock.pstmn.io/action",
					"protocol": "https",
					"host": [
						"0e388f77-5747-4615-a163-6c47c0ac1082",
						"mock",
						"pstmn",
						"io"
					],
					"path": [
						"action"
					]
				}
			},
			"response": [
				{
					"name": "https://0e388f77-5747-4615-a163-6c47c0ac1082.mock.pstmn.io",
					"originalRequest": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\"name\":\"Sergey\"}"
						},
						"url": {
							"raw": "https://0e388f77-5747-4615-a163-6c47c0ac1082.mock.pstmn.io/action",
							"protocol": "https",
							"host": [
								"0e388f77-5747-4615-a163-6c47c0ac1082",
								"mock",
								"pstmn",
								"io"
							],
							"path": [
								"action"
							]
						}
					},
					"status": "Not Found",
					"code": 404,
					"_postman_previewlanguage": "json",
					"header": [
						{
							"key": "Access-Control-Allow-Origin",
							"value": "*"
						},
						{
							"key": "Content-Encoding",
							"value": "gzip"
						},
						{
							"key": "Content-Type",
							"value": "application/json; charset=utf-8"
						},
						{
							"key": "Date",
							"value": "Sun, 08 Sep 2019 14:05:22 GMT"
						},
						{
							"key": "ETag",
							"value": "W/\"af-GpPmRW0ySclCbQDmlVYDXw7rYA4\""
						},
						{
							"key": "Server",
							"value": "nginx"
						},
						{
							"key": "Vary",
							"value": "Accept-Encoding"
						},
						{
							"key": "x-srv-span",
							"value": "v=1;s=8fba8ce98f18eb66"
						},
						{
							"key": "x-srv-trace",
							"value": "v=1;t=a5d992cc6b575ece"
						},
						{
							"key": "Content-Length",
							"value": "74"
						},
						{
							"key": "Connection",
							"value": "keep-alive"
						}
					],
					"cookie": [],
					"body": "{\n    \"status\": {\n        \"name\": \"Sergey\",\n        \"status\": \"created\",\n        \"message\": \"Success.\"\n    }\n}"
				},
				{
					"name": "https://0e388f77-5747-4615-a163-6c47c0ac1082.mock.pstmn.io",
					"originalRequest": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "https://0e388f77-5747-4615-a163-6c47c0ac1082.mock.pstmn.io",
							"protocol": "https",
							"host": [
								"0e388f77-5747-4615-a163-6c47c0ac1082",
								"mock",
								"pstmn",
								"io"
							]
						}
					},
					"status": "Not Found",
					"code": 404,
					"_postman_previewlanguage": "json",
					"header": [
						{
							"key": "Access-Control-Allow-Origin",
							"value": "*"
						},
						{
							"key": "Content-Encoding",
							"value": "gzip"
						},
						{
							"key": "Content-Type",
							"value": "application/json; charset=utf-8"
						},
						{
							"key": "Date",
							"value": "Sun, 08 Sep 2019 14:03:03 GMT"
						},
						{
							"key": "ETag",
							"value": "W/\"af-GpPmRW0ySclCbQDmlVYDXw7rYA4\""
						},
						{
							"key": "Server",
							"value": "nginx"
						},
						{
							"key": "Vary",
							"value": "Accept-Encoding"
						},
						{
							"key": "x-srv-span",
							"value": "v=1;s=8fba8ce98f18eb66"
						},
						{
							"key": "x-srv-trace",
							"value": "v=1;t=a5d992cc6b575ece"
						},
						{
							"key": "Content-Length",
							"value": "148"
						},
						{
							"key": "Connection",
							"value": "keep-alive"
						}
					],
					"cookie": [],
					"body": "{\n    \"status\": {\n        \"name\": \"Test\",\n        \"message\": \"Success.\"\n    }\n}"
				}
			]
		}
	]
}